generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Level {
  id            String    @id @default(uuid())
  title         String
  imageUrl      String
  naturalWidth  Int
  naturalHeight Int
  targets       Target[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Character {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  targets   Target[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Guess     Guess[]
}

model Target {
  id          String @id @default(uuid())
  levelId     String
  characterId String
  xMin        Float
  yMin        Float
  xMax        Float
  yMax        Float

  level     Level     @relation(fields: [levelId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@unique([levelId, characterId])
  @@index([levelId])
  @@index([characterId])
}

model Session {
  id         String        @id @default(uuid())
  levelId    String
  startedAt  DateTime      @default(now())
  finishedAt DateTime?
  playerName String?
  durationMs Int?
  status     SessionStatus @default(ACTIVE)

  level   Level   @relation(fields: [levelId], references: [id], onDelete: Cascade)
  guesses Guess[]

  @@index([levelId])
  @@index([status])
  @@index([startedAt])
}

model Guess {
  id          String   @id @default(uuid())
  sessionId   String
  characterId String
  x           Float
  y           Float
  correct     Boolean
  createdAt   DateTime @default(now())

  session   Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Restrict)

  @@index([sessionId])
  @@index([characterId])
  @@index([createdAt])
}

enum SessionStatus {
  ACTIVE
  COMPLETED
}
